/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.26).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.radub.openbanking.controller;

import io.swagger.model.OBErrorResponse1;
import io.swagger.model.OBReadTransaction6;
import org.threeten.bp.OffsetDateTime;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import javax.validation.Valid;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-06-15T10:33:38.546Z[GMT]")
@Validated
public interface AccountsApi {

  
    @Operation(summary = "Get Transactions", description = "", security = {
        @SecurityRequirement(name = "PSUOAuth2Security", scopes = {
            "accounts"        })    }, tags={ "Transactions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Transactions Read", content = @Content(mediaType = "application/json; charset&#x3D;utf-8", schema = @Schema(implementation = OBReadTransaction6.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad request", content = @Content(mediaType = "application/json; charset&#x3D;utf-8", schema = @Schema(implementation = OBErrorResponse1.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/json; charset&#x3D;utf-8", schema = @Schema(implementation = OBErrorResponse1.class))),
        
        @ApiResponse(responseCode = "405", description = "Method Not Allowed"),
        
        @ApiResponse(responseCode = "406", description = "Not Acceptable"),
        
        @ApiResponse(responseCode = "429", description = "Too Many Requests"),
        
        @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json; charset&#x3D;utf-8", schema = @Schema(implementation = OBErrorResponse1.class))) })
    @RequestMapping(value = "/accounts/{AccountId}/transactions",
        produces = { "application/json; charset=utf-8", "application/json", "application/jose+jwe" }, 
        method = RequestMethod.GET)
    ResponseEntity<OBReadTransaction6> getAccountsAccountIdTransactions(@Parameter(in = ParameterIn.PATH, description = "AccountId", required=true, schema=@Schema()) @PathVariable("AccountId") String accountId, @Parameter(in = ParameterIn.HEADER, description = "An Authorisation Token as per https://tools.ietf.org/html/rfc6750" ,required=true,schema=@Schema()) @RequestHeader(value="Authorization", required=true) String authorization, @Parameter(in = ParameterIn.HEADER, description = "The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC" ,schema=@Schema()) @RequestHeader(value="x-fapi-auth-date", required=false) String xFapiAuthDate, @Parameter(in = ParameterIn.HEADER, description = "The PSU's IP address if the PSU is currently logged in with the TPP." ,schema=@Schema()) @RequestHeader(value="x-fapi-customer-ip-address", required=false) String xFapiCustomerIpAddress, @Parameter(in = ParameterIn.HEADER, description = "An RFC4122 UID used as a correlation id." ,schema=@Schema()) @RequestHeader(value="x-fapi-interaction-id", required=false) String xFapiInteractionId, @Parameter(in = ParameterIn.HEADER, description = "Indicates the user-agent that the PSU is using." ,schema=@Schema()) @RequestHeader(value="x-customer-user-agent", required=false) String xCustomerUserAgent, @Parameter(in = ParameterIn.QUERY, description = "The UTC ISO 8601 Date Time to filter transactions FROM NB Time component is optional - set to 00:00:00 for just Date. If the Date Time contains a timezone, the ASPSP must ignore the timezone component." ,schema=@Schema()) @Valid @RequestParam(value = "fromBookingDateTime", required = false) OffsetDateTime fromBookingDateTime, @Parameter(in = ParameterIn.QUERY, description = "The UTC ISO 8601 Date Time to filter transactions TO NB Time component is optional - set to 00:00:00 for just Date. If the Date Time contains a timezone, the ASPSP must ignore the timezone component." ,schema=@Schema()) @Valid @RequestParam(value = "toBookingDateTime", required = false) OffsetDateTime toBookingDateTime);

}

